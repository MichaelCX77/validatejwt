name: Run Tests and Create PR

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üîÅ EVENTO QUE DISPARA O WORKFLOW
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
on:
  push:
    branches-ignore:
      - main     # Ignora pushes para main
      - develop  # Ignora pushes para develop
    # Executa o workflow em pushes para todas as outras branches

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üß™ JOB: Executa testes e valida cobertura
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
jobs:
  test-and-report:
    runs-on: ubuntu-latest

    # üîÅ Output para outros jobs (se necess√°rio)
    outputs:
      branch_name: ${{ steps.vars.outputs.branch_name }}

    steps:

      # üì• Etapa 1: Checkout do reposit√≥rio com hist√≥rico completo
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Necess√°rio para basear PRs corretamente

      # üè∑Ô∏è Etapa 2: Extrair nome da branch atual
      - name: Set branch name
        id: vars
        run: echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      # ‚òï Etapa 3: Configurar JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # üß™ Etapa 4: Executar testes e gerar relat√≥rio Jacoco
      - name: Run tests and generate Jacoco report
        run: mvn clean test jacoco:report

      # üìä Etapa 5: Validar cobertura m√≠nima extra√≠da do HTML gerado pelo Jacoco
      - name: Extract coverage from HTML report
        run: |
          FILE="target/site/jacoco/index.html"
          if [ -f "$FILE" ]; then
            COVERAGE_LINE=$(grep -A 1 '<tfoot>' "$FILE" | grep 'Total')
            COVERAGE=$(echo "$COVERAGE_LINE" | grep -oP '(?<=<td class="ctr2">)[0-9]{1,3}%')
            COVERAGE=$(echo "$COVERAGE" | head -n 1)
            MIN_COVERAGE=80
            COVERAGE_VALUE=$(echo "$COVERAGE" | tr -d '%')

            echo "Cobertura m√≠nima exigida: ${MIN_COVERAGE}%"
            echo "Cobertura atual: ${COVERAGE}"

            if [ "$COVERAGE_VALUE" -ge "$MIN_COVERAGE" ]; then
              echo "‚úÖ Cobertura m√≠nima atingida."
            else
              echo "‚ùå Cobertura abaixo do m√≠nimo."
            fi

            echo "‚úÖ Cobertura de instru√ß√µes: $COVERAGE"
          else
            echo "‚ùå Arquivo de cobertura n√£o encontrado: $FILE"
            exit 1
          fi
